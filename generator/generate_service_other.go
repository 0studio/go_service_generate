package generator

import (
	"fmt"
	"go/format"
	"os"
	"path/filepath"
	"strings"
)

func (sd StructDescription) GenerateServiceOther(property Property, srcDir string) {
	pkList := sd.GetPKFieldList()
	if len(pkList) > 2 || len(pkList) == 0 {
		return
	}

	file := filepath.Join(srcDir, fmt.Sprintf("service_%s_stub.go", strings.ToLower(sd.StructName)))
	if IsFileExists(file) {
		return
	}
	outputF, err := os.OpenFile(file, os.O_RDWR|os.O_CREATE|os.O_TRUNC, os.ModePerm)
	if err != nil {
		fmt.Println(err)
		return
	}

	defer outputF.Close()
	s := strings.Replace(SERVICE_OTHER_TEMPLATE, "__package__", property.PackageName, -1)
	s = strings.Replace(s, "__Entity__", sd.StructName, -1)
	s = strings.Replace(s, "__LowercaseEntity__", LowerCaseFirstChar(sd.StructName), -1)

	formatSrc, _ := format.Source([]byte(s))
	if err == nil {
		outputF.WriteString(string(formatSrc))
	} else {
		outputF.WriteString(s)
	}

}

const (
	SERVICE_OTHER_TEMPLATE = `//this is generated by tools(https://github.com/0studio/go_service_generator)
// you CAN edit this file
// 这个文件里的东西是 可编辑的，
// 代码生成工具 在生成的时候 ，如果发现 这个文件已经存在,就不会重新这成这个文件，

package __package__

import (
	"github.com/0studio/lru"
	"time"
)

const (
	LRU_Cache_Sharding_Cnt___Entity__   = 32   // lru sharding for reducing lock time
	LRU_Cache_Size___Entity__           = 1024 // total size of lru cache
	Memcache_Expired_Seconds___Entity__ = 60 * 30
	Memcache_Prefix___Entity__          = "__LowercaseEntity__"
)

type __Entity__ServiceOther interface {
	// 这个接口是让你来扩展  __Entity__Service 接口的，
	// 当你想给__Entity__Service 添加新的接口的时候 ， 在这里添加，
	//  然后 *__Entity__ServiceImpl  实现此接口即可
}

// type lru.SizeAware interface
func (e __Entity__) Size() int {
	return 1
}
// type lru.SizeAware interface
func (eMap __Entity__Map) Size() int {
	return 1
}


func (l __Entity__) OnPurge(why lru.PurgeReason) {
	// 当__Entity__从 lrucache 中被删除 更新 时都会调到此函数
	if why == lru.PURGE_REASON_UPDATE || why == lru.PURGE_REASON_DELETE { // update or delete
		return
	}
	// if why != lru.CACHEFULL {
	// 	return
	// }
	// why == lru.CACHEFULL

	if !l.IsFlagDirty() {
		return
	}

	if __LowercaseEntity__Service == nil {
		return
	}
	defer func() {
		if x := recover(); x != nil {
            printStack(x,__LowercaseEntity__Service.log)
		}
	}()
	__LowercaseEntity__Service.setOutside(&l, time.Now())
}

func (eMap __Entity__Map) OnPurge(why lru.PurgeReason) {
		// 当__Entity__从 lrucache 中被删除 更新 时都会调到此函数
	if why == lru.PURGE_REASON_UPDATE || why == lru.PURGE_REASON_DELETE { // update or delete
		return
	}
	if __LowercaseEntity__Service == nil {
		return
	}

	defer func() {
		if x := recover(); x != nil {
            printStack(x,__LowercaseEntity__Service.log)
		}
	}()

	// if why != lru.CACHEFULL {
	// 	return
	// }
	// why == lru.CACHEFULL

	for _, e := range eMap {
		if !e.IsFlagDirty() {
			continue
		}

		__LowercaseEntity__Service.setOutside(&e, time.Now())
	}
}

`
)
