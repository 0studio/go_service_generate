package generator

import (
	"fmt"
	"os"
	"path/filepath"
	"strings"
)

func (sd StructDescription) GenerateServiceOther(property Property, srcDir string) {
	pkList := sd.GetPKFieldList()
	if len(pkList) > 2 {
		return
	}

	file := filepath.Join(srcDir, fmt.Sprintf("service_%s_other_stub.go", strings.ToLower(sd.StructName)))
	if IsFileExists(file) {
		return
	}
	outputF, err := os.OpenFile(file, os.O_RDWR|os.O_CREATE|os.O_TRUNC, os.ModePerm)
	if err != nil {
		fmt.Println(err)
		return
	}

	defer outputF.Close()
	s := strings.Replace(SERVICE_OTHER_TEMPLATE, "__package__", property.PackageName, -1)
	s = strings.Replace(s, "__Entity__", sd.StructName, -1)
	s = strings.Replace(s, "__LowercaseEntity__", LowerCaseFirstChar(sd.StructName), -1)
	outputF.WriteString(s)

}

const (
	SERVICE_OTHER_TEMPLATE = `//this is generated by tools(https://github.com/0studio/go_service_generator)
// you CAN edit this file
// 这个文件里的东西是 可编辑的，
// 代码生成工具 在生成的时候 ，如果发现 这个文件已经存在,就不会重新这成这个文件，

package user

const (
	LRU_Cache_Sharding_Cnt   = 32   // lru sharding for reducing lock time
	LRU_Cache_Size           = 1024 // total size of lru cache
	Memcache_Expired_Seconds = 60 * 30
	Memcache_Prefix          = "__LowercaseEntity__"
)

type __Entity__ServiceOther interface {
	// 这个接口是让你来扩展  __Entity__Service 接口的，
	// 当你想给__Entity__Service 添加新的接口的时候 ， 在这里添加，
	//  然后 *__Entity__ServiceImpl  实现此接口即可
}

`
)
